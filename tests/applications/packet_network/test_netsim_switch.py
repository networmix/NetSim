from __future__ import annotations

import math
from typing import Generator

from netsim.core import SimTime
from netsim.applications.packet_network.base import (
    PacketSink,
    PacketSource,
    PacketSize,
)
from netsim.applications.packet_network.switch import PacketProcessor, PacketSwitch
from netsim.applications.packet_network.simulator import NetSim

from tests.common import _close


def _arrival_every_1s() -> Generator[SimTime, None, None]:
    yield 0
    while True:
        yield 1


def _size_1500() -> Generator[PacketSize, None, None]:
    while True:
        yield 1500


# --------------------------------------------------------------------------- #
# 1. PacketProcessor with *no* TX interface  →  drops everything
# --------------------------------------------------------------------------- #
def test_packet_processor_drops_without_tx() -> None:
    sim = NetSim()
    src = PacketSource(sim.ctx, _arrival_every_1s(), _size_1500())
    pp = PacketProcessor(sim.ctx)

    pp.add_interface_rx(src)  # but no TX attached

    sim.run(until_time=10)  # 10 packets generated

    s_sf = src.stat.cur_stat_frame
    p_sf = pp.stat.cur_stat_frame

    assert s_sf.total_sent_pkts == 10
    assert p_sf.total_received_pkts == 10
    assert p_sf.total_sent_pkts == 0
    assert p_sf.total_dropped_pkts == 10
    # byte‑level conservation
    _close(p_sf.total_dropped_bytes, s_sf.total_sent_bytes)
    _close(p_sf.total_received_bytes, s_sf.total_sent_bytes)


# --------------------------------------------------------------------------- #
# 2. PacketProcessor with RX + TX interface  →  forwards everything
# --------------------------------------------------------------------------- #
def test_packet_processor_forwards_to_sink() -> None:
    sim = NetSim()
    src = PacketSource(sim.ctx, _arrival_every_1s(), _size_1500())
    pp = PacketProcessor(sim.ctx)
    sink = PacketSink(sim.ctx)

    pp.add_interface_rx(src)
    pp.add_interface_tx(sink)

    sim.run(until_time=10)

    s_sf = src.stat.cur_stat_frame
    p_sf = pp.stat.cur_stat_frame
    k_sf = sink.stat.cur_stat_frame

    # every packet generated by the source should arrive at the sink
    assert s_sf.total_sent_pkts == p_sf.total_received_pkts == p_sf.total_sent_pkts
    assert k_sf.total_received_pkts == 10
    # zero drops along the path
    assert p_sf.total_dropped_pkts == 0
    assert k_sf.total_dropped_pkts == 0
    # processor queue never builds up in this simple scenario
    assert p_sf.max_queue_len == 0


# --------------------------------------------------------------------------- #
# 3. PacketSwitch end‑to‑end path
# --------------------------------------------------------------------------- #
def test_packet_switch_rx_to_tx_path() -> None:
    sim = NetSim()
    src = PacketSource(sim.ctx, _arrival_every_1s(), _size_1500())
    sw = PacketSwitch(sim.ctx)
    sink = PacketSink(sim.ctx)

    # Build interfaces and internal processor
    rx_int = sw.create_interface_rx("in0", propagation_delay=0.0)
    tx_int = sw.create_interface_tx("out0", bw=1_000_000)  # large BW

    src.subscribe(rx_int)
    tx_int.subscribe(sink)
    sw.create_packet_processor()  # wires RX/TX to processor

    sim.run(until_time=10)  # 10 packets

    sw_sf = sw.stat.cur_stat_frame
    k_sf = sink.stat.cur_stat_frame

    # switch should forward all packets with zero loss
    assert sw_sf.total_received_pkts == 10
    assert sw_sf.total_sent_pkts == 10
    assert sw_sf.total_dropped_pkts == 0
    assert k_sf.total_received_pkts == 10

    # aggregated byte counters match
    _close(sw_sf.total_received_bytes, k_sf.total_received_bytes)
    _close(sw_sf.total_sent_bytes, k_sf.total_received_bytes)

    # ensure RX and TX interface stats are in sync with totals
    rx_sf = sw.stat._rx_interfaces["in0"].cur_stat_frame
    tx_sf = sw.stat._tx_interfaces["out0"].cur_stat_frame
    assert rx_sf.total_received_pkts == 10
    assert tx_sf.total_sent_pkts == 10
    # latency through switch should be non‑negative and small (<1 s here)
    assert tx_sf.avg_latency_at_departure >= 0
    assert tx_sf.avg_latency_at_departure < 1
